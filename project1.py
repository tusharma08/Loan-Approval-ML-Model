# -*- coding: utf-8 -*-
"""Project1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BcIgIpa0Q3T1OyaqIMPykqiEZqZwnZ9
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/loan_approval_dataset.csv")

df.head()

df.describe()

df.info()

df.isnull().sum()

df.nunique()

df.select_dtypes(include='object').nunique()

df.columns

df[' education'].value_counts()

df[' loan_status'].value_counts()

dataset[' self_employed'].value_counts()

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()

dataset[' education'] = label_encoder.fit_transform(dataset[' education'])
dataset[' self_employed'] = label_encoder.fit_transform(dataset[' self_employed'])
dataset[' loan_status'] = label_encoder.fit_transform(dataset[' loan_status'])

dataset.head()

education_counts = dataset[' education'].value_counts()

plt.figure(figsize=(6, 6))
plt.pie(education_counts, labels=education_counts.index, autopct='%1.1f%%', colors=['tomato', 'orange'])
plt.title('Education Distribution')
plt.show()

import seaborn as sns
sns.countplot(x = ' no_of_dependents', data = dataset).set_title('Number of Dependents')

sns.countplot(data=dataset, x=" education", hue=" loan_status")
plt.show()

sns.countplot(data=dataset, x=" self_employed", hue=" loan_status")
plt.show()

sns.countplot(data=dataset, x=" loan_status")
plt.show()

dataset.info()

x = dataset.drop(columns = [' loan_status'])
y = dataset[' loan_status']

x

y

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state=9)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
lr = LogisticRegression()
scores = []
names = []
names.append("Logistic Regression")
lr.fit(x_train, y_train)
y_pred_lr = lr.predict(x_test)
score_logreg = accuracy_score(y_test, y_pred_lr)

scores.append(score_logreg)
print("Logistic Regression Accuracy: ", score_logreg)

from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier()
names.append("RandomForest")
clf.fit(x_train, y_train)

y_pred = clf.predict(x_test)
score = accuracy_score(y_test, y_pred)
scores.append(score)
print("Accuracy: ", score)

plt.bar(names, scores)
plt.xlabel("Algorithms")
plt.ylabel("Scores")
plt.title("Comparison of multiple algorithms")
plt.show()